buildscript {
    ext.bouncycastleVersion = '1.60'
    ext.jacksonVersion = '2.9.7'
    ext.jnr_unixsocketVersion = '0.15'
    ext.okhttpVersion = '3.8.1'
    ext.rxjavaVersion = '2.2.15'
    ext.slf4jVersion = '1.7.25'
    ext.javaWebSocketVersion = '1.3.8'
    ext.asmVersion = '8.0.1'

    // test dependencies
    ext.equalsverifierVersion = '2.1.7'
    ext.junitVersion = '4.11'
    ext.junitBenchmarkVersion = '0.7.2'
    ext.logbackVersion = '1.2.3'
    ext.mockitoVersion = '1.10.19'
    ext.hamcrestVersion = '1.3'
    ext.testcontainersVersion = '1.10.5'
    ext.awaitility = '3.1.5'
    ext.wiremockVersion = '2.25.1'

    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'com.jfrog.bintray' version '1.8.5' apply false
    id 'org.unbroken-dome.test-sets' version '3.0.1' apply false
    id "de.marcphilipp.nexus-publish" version '0.4.0' apply false
    id 'com.gradle.plugin-publish' version '0.12.0' apply false
}

description 'neow3j Project'

ext {
    publishSonaTypeUsername = project.hasProperty('nexusUsername') ? project.property('nexusUsername') : ''
    publishSonaTypePassword = project.hasProperty('nexusPassword') ? project.property('nexusPassword') : ''
    publishGitHubUsername = project.hasProperty('githubUsername') ? project.property('githubUsername') : ''
    publishGitHubPassword = project.hasProperty('githubPassword') ? project.property('githubPassword') : ''
    publishJFrogUsername = project.hasProperty('jfrogUsername') ? project.property('jfrogUsername') : ''
    publishJFrogPassword = project.hasProperty('jfrogPassword') ? project.property('jfrogPassword') : ''
}

apply plugin: 'jacoco'

allprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'idea'
    apply plugin: 'signing'
    //apply plugin: 'checkstyle'

    group 'io.neow3j'
    version '3.2.0'
    archivesBaseName = "${it.name}"

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    if (project.hasProperty('snapshot')) {
        version = version + '-SNAPSHOT'
    }

    repositories {
        mavenLocal()
        mavenCentral()
    }

    // We don't want any compiler warnings
    compileJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
    compileTestJava {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }

    javadoc {
        options.encoding = 'UTF-8'
    }

    jacoco {
        toolVersion = '0.8.4' // See http://www.eclemma.org/jacoco/.
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}")
    }

//    checkstyle {
//        toolVersion = "7.7"
//        configFile = file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
//    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.unbroken-dome.test-sets'

    if (project.name.startsWith('gradle-plugin')) {
        apply plugin: 'java-gradle-plugin'
        apply plugin: 'com.gradle.plugin-publish'
    }

    testSets {
        integrationTest { dirName = 'test-integration' }
    }

    dependencies {
        testCompile "junit:junit:$junitVersion",
                "org.mockito:mockito-core:$mockitoVersion",
                "org.hamcrest:hamcrest-all:$hamcrestVersion",
                "org.testcontainers:testcontainers:$testcontainersVersion"
    }

    task javadocsJar(type: Jar) {
        archiveClassifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = 'sources'
        from sourceSets.main.allSource
    }

    task testsJar(type: Jar) {
        archiveClassifier = 'tests'
        from sourceSets.test.output
    }

    javadoc { options.encoding = 'UTF-8' }

    artifacts { archives sourcesJar, javadocsJar, testsJar }

    // Avoid to publish gradle-plugin module.
    // See "gradle-plugin/README.md" for Gradle Plugin release procedures
    if (!project.name.startsWith('gradle-plugin') ||
            !project.name.startsWith(rootProject.name)) {

        apply plugin: 'com.jfrog.bintray'
        apply plugin: 'maven-publish'
        apply plugin: "de.marcphilipp.nexus-publish"

        publishing {
            repositories {
                maven {
                    def sonatypeReleasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                    def sonatypeSnapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
                    def githubRepoUrl = "https://maven.pkg.github.com/neow3j/neow3j/"
                    if (project.hasProperty('sonatype')) {
                        url = project.hasProperty('snapshot') ? sonatypeSnapshotsRepoUrl : sonatypeReleasesRepoUrl
                        credentials {
                            username publishSonaTypeUsername
                            password publishSonaTypePassword
                        }
                    }
                    if (project.hasProperty('github')) {
                        url = githubRepoUrl
                        credentials {
                            username publishGitHubUsername
                            password publishGitHubPassword
                        }
                    }
                }
            }
            publications {
                mavenJava(MavenPublication) {

                    artifactId "${project.name}"

                    from components.java

                    artifact sourcesJar
                    artifact javadocsJar
                    artifact testsJar

                    pom {
                        name = 'Neow3j'
                        packaging 'jar'
                        description = project.description
                        url = 'https://github.com/neow3j'

                        scm {
                            url = 'https://github.com/neow3j/neow3j'
                            connection = 'scm:https://github.com/neow3j/neow3j.git'
                            developerConnection = 'scm:https://github.com/neow3j/neow3j.git'
                        }

                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }

                        developers {
                            developer {
                                id = 'gsmachado'
                                name = 'Guilherme Sperb Machado'
                                email = 'guil@axlabs.com'
                            }
                            developer {
                                id = 'csmuller'
                                name = 'Claude MÃ¼ller'
                                email = 'claude@axlabs.com'
                            }
                        }
                    }
                }
            }
        }

        signing {
            // only execute as part of this task
            required { gradle.taskGraph.hasTask('publish') }
            sign publishing.publications.mavenJava
        }

        task release {
            dependsOn 'build'
            dependsOn 'publish'

            tasks.findByName('publish').mustRunAfter 'build'
        }

        bintray {
            user = publishJFrogUsername
            key = publishJFrogPassword
            def slug = rootProject.name
            if (project.hasProperty('rootProjectOverride')) {
                slug = project.rootProjectOverride
            }
            publications = ['mavenJava']
            publish = true
            override = true
            // The filesSpec clause below is based on:
            // https://github.com/bintray/gradle-bintray-plugin/issues/255
            // The problem solved is: .asc files (signatures) are not
            // uploaded by the bintrayUpload
            filesSpec {
                from("${buildDir}/libs") {
                    include '*.jar.asc'
                }
                from("${buildDir}/publications/mavenJava") {
                    include 'pom-default.xml.asc'
                    rename 'pom-default.xml.asc', "${project.name}-${project.version}.pom.asc"
                }
                into "${project.group.replaceAll(/\./, '/')}/${project.name}/${project.version}"
            }
            pkg {
                repo = 'maven'
                name = slug
                userOrg = 'neow3j'
                licenses = ['Apache-2.0']
                publicDownloadNumbers = true
                vcsUrl = 'https://github.com/neow3j/neow3j.git'
            }
        }

    }
}

task jacocoRootTestReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    getAdditionalSourceDirs().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().setFrom(files(subprojects.sourceSets.main.output))
    getExecutionData().setFrom(files(subprojects.jacocoTestReport.executionData).filter { f -> f.exists() })
    reports {
        xml.enabled = true
        html.enabled = true
    }

    onlyIf = {
        true
    }

    doFirst {
        getExecutionData().setFrom(files(executionData.findAll {
            it.exists()
        }))
    }
}