package io.neow3j.compiler;

import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;

import io.neow3j.compiler.utils.ContractCompilationTestRule;
import io.neow3j.devpack.annotations.OnDeployment;
import io.neow3j.devpack.events.Event2Args;
import io.neow3j.protocol.core.methods.response.NeoApplicationLog.Execution;
import io.neow3j.utils.Numeric;
import java.util.List;
import org.junit.ClassRule;
import org.junit.Test;
import org.junit.rules.RuleChain;
import org.junit.rules.TestRule;

public class DeploymentMethodIntegrationTest extends ContractTest {

    @ClassRule
    public static TestRule chain = RuleChain
            .outerRule(privateNetContainer)
            .around(
                    new ContractCompilationTestRule(
                            DeploymentMethodIntegrationTestContract.class.getName(),
                            privateNetContainer
                    )
            );

    @Test
    public void deployingContractWithDeployMethod() throws Throwable {
        List<Execution> executions = neow3j.getApplicationLog(deployTxHash).send()
                .getApplicationLog().getExecutions();

        assertThat(executions.get(0).getNotifications().get(0).getEventName(), is("onDeploy"));
        assertThat(executions.get(0).getNotifications().get(0).getState().getList().get(0)
                .getString(), is("Deployed contract."));

        // Deploy event generated by ManagementContract
        assertThat(executions.get(0).getNotifications().get(1).getEventName(), is("Deploy"));
        String message = executions.get(0).getNotifications().get(1).getState().getList().get(0)
                .getHexString();
        assertThat(Numeric.reverseHexString(message), is(contract.getScriptHash().toString()));
    }

    static class DeploymentMethodIntegrationTestContract {

        static Event2Args<String, Object> onDeploy;

        @OnDeployment
        public static void deploy(Object data, boolean update) {
            if (update) {
                return;
            }
            onDeploy.notify("Deployed contract.", data);
        }
    }
}
